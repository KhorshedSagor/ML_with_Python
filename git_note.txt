
I’ll create a **comprehensive but easy-to-understand note on Git commands**, written in simple language so a 10th grader can follow.

---

# 📒 Git Commands – A Simple Guide for Beginners

Git is a **version control system**. It helps you keep track of changes in your code or files, work with teams, and go back to older versions if something goes wrong.

---

## 1. 🛠️ Setup Commands (Run these only once per computer/project)

* **`git config --global user.name "Your Name"`**
  → Tells Git your name (will appear in commits).

* **`git config --global user.email "your@email.com"`**
  → Tells Git your email (also shown in commits).

* **`git config --list`**
  → Shows your Git settings.

---

## 2. 📂 Starting a Repository

* **`git init`**
  → Starts a new Git repository in the current folder.

* **`git clone <url>`**
  → Copies (downloads) an existing GitHub repository to your computer.

---

## 3. 📄 Checking Status

* **`git status`**
  → Shows which files are changed, added, or not tracked.

---

## 4. 📌 Staging & Committing Changes

* **`git add <filename>`**
  → Stages (prepares) one file for commit.

* **`git add .`**
  → Stages ALL changed files in the folder.

* **`git commit -m "message"`**
  → Saves (commits) staged changes with a short message.

🔑 *Think of `add` as putting files into a box, and `commit` as sealing the box with a label.*

---

## 5. 📜 Viewing History

* **`git log`**
  → Shows all commits made (history).

* **`git log --oneline`**
  → Short version of commit history.

---

## 6. 🌲 Working with Branches

* **`git branch`**
  → Lists all branches.

* **`git branch <branch-name>`**
  → Creates a new branch.

* **`git checkout <branch-name>`**
  → Switches to another branch.

* **`git checkout -b <branch-name>`**
  → Creates and switches to a new branch at the same time.

* **`git merge <branch-name>`**
  → Combines changes from another branch into the current one.

---

## 7. 🔄 Remote Repositories (GitHub, GitLab, etc.)

* **`git remote -v`**
  → Shows connected remote repositories.

* **`git remote add origin <url>`**
  → Connects local repo to a remote repo.

* **`git push origin <branch>`**
  → Uploads (pushes) commits to GitHub.

* **`git pull origin <branch>`**
  → Downloads (pulls) latest changes from GitHub.

* **`git fetch`**
  → Gets updates from GitHub but does not merge them.

---

## 8. ❌ Undoing Things

* **`git restore <filename>`**
  → Undo changes in a file (before staging).

* **`git reset <filename>`**
  → Unstages a file (removes from staging area).

* **`git reset --hard`**
  → Discards ALL changes and resets to the last commit. ⚠️ Use carefully!

---

## 9. 📥 Extra Useful Commands

* **`git diff`**
  → Shows differences between file versions.

* **`git stash`**
  → Temporarily saves uncommitted changes (like putting them aside).

* **`git stash pop`**
  → Restores stashed changes.

---

## 🎯 Quick Workflow Summary

1. `git init` → Start a repo (or `git clone` to copy one).
2. `git status` → Check changes.
3. `git add .` → Stage changes.
4. `git commit -m "message"` → Save changes.
5. `git push origin main` → Upload to GitHub.

---

✅ This covers **all important Git commands** in a way that even a high schooler can understand.

Do you want me to also make this into a **visual cheat sheet (like a one-page chart with commands and meaning)** for easy revision?
